Definition Type := Universe f0.

Parameter N : Type.
Parameter 0 : N.
Parameter S : N -> N.

Parameter N_ind :
  forall (P : N -> Type),
  P 0 ->
  (forall n : N, P n -> P (S n)) ->
  forall (m : N), P m.

Parameter N_ind_0 :
  forall 
    (P : N -> Type) 
    (z : P 0)
    (f : forall n : N, P n -> P (S n)),
  N_ind P z f 0 == z.

Parameter N_ind_S :
  forall 
    (P : N -> Type) 
    (z : P 0)
    (f : forall n : N, P n -> P (S n))
    (m : N),
  N_ind P z f (S m) == f m (N_ind P z f m).


Definition N_rec :=
  fun (A : Type) (x : A) (f : N -> A -> A) =>
    N_ind (fun (_ : N) => A) x f.
    
Opaque Definition plus :=
  N_rec (N -> N)
    (fun n : N => n) 
    (fun (_ : N) (f : N -> N) (m : N) => S (f m)).

Opaque Definition mult :=
  N_rec (N -> N)
    (fun n : N => 0)
    (fun (_ : N) (f : N -> N) (m : N) => plus m (f m)).

Opaque Definition id := N_ind (fun _ : N => N) 0 (fun (_ : N) (k : N) => S k).

Definition check_evil :=
  compute equation
     id (id (S (S 0))) == S (S 0)
  using
     unfold id
     rewrite N_ind_0
     rewrite N_ind_S
  in 
     refl (id (id (S (S 0)))) :: S (S 0) == S (S 0).

Definition one := S 0.
Definition two := S (S 0).
Definition three := S (S (S 0)).
Definition four := S (S (S (S 0))).
Definition five := plus two three.
Definition six := mult two three.
Definition seven := S (S (S (S (S (S (S 0)))))).
Definition ten := 
  S (S (S (S (S (S (S (S (S (S 0))))))))).
Definition twenty := 
  S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S 0))))))))))))))))))).

Definition check_2_x_2 :=
   refl (S (S (S (S 0)))) :: S (S (S (S 0))) == four.

Definition check_2_x_3 :=
 compute equation S (S (S (S (S (S 0))))) == six
 compute equation S (S (S (S (S (S 0))))) == plus two four
 using
   unfold mult
   unfold plus
   rewrite N_ind_0
   rewrite N_ind_S
 in
    refl (S (S (S (S (S (S 0)))))) :: six == plus two four.

Definition check_3 :=
 compute equation three == plus two one
 using
   unfold plus
   rewrite N_ind_0
   rewrite N_ind_S
 in
   refl three :: three == plus two one.

Definition check_5 :=
   refl five :: five == plus two three.

Definition check_6 :=
 compute equation six == plus two four
 using
   unfold plus
   unfold mult
   rewrite N_ind_0
   rewrite N_ind_S
 in
   refl six :: six == plus two four.

(* Getting slow *)
(*
Definition check_20 :=
 compute equation 
     mult ten ten == mult twenty (S (S (S (S (S 0)))))
 using
   unfold plus
   unfold mult
   rewrite N_ind_0
   rewrite N_ind_S
 in
   refl (mult ten ten) :: mult ten ten == mult twenty (S (S (S (S (S 0))))).
   *)

#context
